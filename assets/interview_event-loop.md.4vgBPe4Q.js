import{_ as s,U as i,S as a,au as t,aD as p,aE as n,aF as l,aG as e,aH as h,aI as k,aJ as d,aK as o,aL as r,aM as E,aN as c,aO as g,aP as y,aQ as F,aR as m}from"./chunks/framework.DslXz8fB.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/event-loop.md","filePath":"interview/event-loop.md"}'),u={name:"interview/event-loop.md"},_=t(`<h2 id="事件循环机制" tabindex="-1">事件循环机制 <a class="header-anchor" href="#事件循环机制" aria-label="Permalink to &quot;事件循环机制&quot;">​</a></h2><p>事件循环 <code>Event Loop</code>，这是目前浏览器和 NodeJS 处理 JavaScript 代码的一种机制，而这种机制存在的背后，就有因为 JavaScript 是一门<strong>单线程</strong>的语言。</p><p>单线程和多线程最简单的区别就是：单线程同一个时间只能做一件事情，而多线程同一个时间能做多件事情。</p><p>而 JavaScript 之所谓设计为单线程语言，主要是因为它作为浏览器脚本语言，主要的用途就是与用户互动，操作 Dom 节点。</p><p>而在这个情景设定下，假设 JavaScript 同时有两个进程，一个是操作A节点，一个是删除A节点，这时候浏览器就不知道要以哪个线程为准了。</p><p>因此为了避免这类型的问题，JavaScript 从一开始就属于单线程语言。</p><p>在 JavaScript 运行的时候，主线程会形成一个栈，这个栈主要是解释器用来最终函数执行流的一种机制。通常这个栈被称为<strong>调用栈Call Stack，或者执行栈（Execution Context Stack）</strong>。</p><p>调用栈，顾名思义是具有 <code>LIFO（后进先出，Last in First Out）</code> 的结构。调用栈内存放的是代码执行期间的所有执行上下文。</p><ul><li>每调用一个函数，解释器就会把该函数的执行上下文添加到调用栈并开始执行；</li><li>正在调用栈中执行的函数，如果还调用了其他函数，那么新函数也会被添加到调用栈，并立即执行；</li><li>当前函数执行完毕后，解释器会将其执行上下文清除调用栈，继续执行剩余执行上下文中的剩余代码；</li><li>但分配的调用栈空间被占满，会引发”堆栈溢出“的报错。</li></ul><p>但这其中会存在一些问题，就是如果当一个语句也需要执行很长时间的话，比如请求数据、定时器、读取文件等等，后面的语句就得一直等着前面的语句执行结束后才会开始执行。</p><p>显而易见，这是不可取的。</p><p>因此，JavaScript将所有执行任务分为了<strong>同步任务</strong>和<strong>异步任务</strong>。</p><p>其实我们每个任务都是在做两件事情，就是发起调用和得到结果。</p><p>而同步任务和异步任务最主要的差别就是，同步任务发起调用后，很快就可以得到结果，而异步任务是无法立即得到结果，比如请求接口，每个接口都会有一定的响应时间，根据网速、服务器等等因素决定，再比如定时器，它需要固定时间后才会返回结果。</p><p>因此，对于同步任务和异步任务的执行机制也不同。</p><p>同步任务的执行，按照代码顺序和调用顺序，支持进入调用栈中并执行，执行结束后就移除调用栈。</p><p>而异步任务的执行，首先它依旧会进入调用栈中，然后发起调用，然后<strong>解释器会将其响应回调任务放入一个任务队列</strong>，紧接着调用栈会将这个任务移除。当主线程清空后，即所有同步任务结束后，解释器会读取任务队列，并依次将已完成的异步任务加入调用栈中并执行。</p><p>这里有个重点，就是异步任务不是直接进入任务队列的。</p><p>这里举一个简单的例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://jsonplaceholder.typicode.com/todos/1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">json</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>很显然，<code>fetch()</code>就是一个异步任务。</p><p>但执行到<code>console.log(2)</code>之前，其实<code>fetch()</code>已经被调用且发起请求了，但是还未响应数据。而响应数据和处理数据的函数<code>then()</code>此时已经在任务队列中，等候<code>console.log(2)</code>执行结束后，所以同步任务清空后，再进入调用栈执行响应动作。</p><p><img src="`+p+`" alt="异步任务的执行例子"></p><p>前面聊到同步任务和异步任务的时候，提及到了<strong>任务队列</strong>。</p><p>在任务队列中，其实还分为<strong>宏任务队列（Task Queue）<strong>和</strong>微任务队列（Microtask Queue）</strong>，对应的里面存放的就是宏任务和微任务。</p><p>首先，<strong>宏任务和微任务都是异步任务</strong>。</p><p>而宏任务和微任务的区别，就是它们执行的顺序，这也是为什么要区分宏任务和微任务。</p><p>在同步任务中，任务的执行都是按照代码顺序执行的，而异步任务的执行也是需要按顺序的，队列的属性就是<strong>先进先出（FIFO，First in First Out）</strong>，因此异步任务会按照进入队列的顺序依次执行。</p><p>但在一些场景下，如果只按照进入队列的顺序依次执行的话，也会出问题。比如队列先进入一个一小时的定时器，接着再进入一个请求接口函数，而如果根据进入队列的顺序执行的话，请求接口函数可能需要一个小时后才会响应数据。</p><p>因此浏览器就会将异步任务分为宏任务和微任务，然后按照事件循环的机制去执行。</p><p><strong>宏任务</strong></p><table><thead><tr><th></th><th>浏览器</th><th>NodeJS</th></tr></thead><tbody><tr><td>整体代码 script</td><td>✔️</td><td>✔️</td></tr><tr><td>UI交互事件</td><td>✔️</td><td>❌</td></tr><tr><td>I/O</td><td>✔️</td><td>✔️</td></tr><tr><td>setTimeout</td><td>✔️</td><td>✔️</td></tr><tr><td>setInterval</td><td>✔️</td><td>✔️</td></tr><tr><td>setImmediate</td><td>❌</td><td>✔️</td></tr><tr><td>requestAnimationFrame</td><td>✔️</td><td>❌</td></tr></tbody></table><p><strong>微任务</strong></p><table><thead><tr><th></th><th>浏览器</th><th>NodeJS</th></tr></thead><tbody><tr><td>Promise.then</td><td>✔️</td><td>✔️</td></tr><tr><td>process.nextTick</td><td>❌</td><td>✔️</td></tr><tr><td>MutationObserver</td><td>✔️</td><td>❌</td></tr></tbody></table><p>其实宏任务队列和微任务队列的执行，就是事件循环的一部分了，所以放在这里一起说。</p><p>事件循环的具体流程如下：</p><ol><li>从宏任务队列中，按照入队顺序，找到第一个执行的宏任务，放入调用栈，开始执行；</li><li>执行完该宏任务下所有同步任务后，即调用栈清空后，该宏任务被推出宏任务队列，然后微任务队列开始按照入队顺序，依次执行其中的微任务，直至微任务队列清空为止；</li><li>当微任务队列清空后，一个事件循环结束；</li><li>接着从宏任务队列中，找到下一个执行的宏任务，开始第二个事件循环，直至宏任务队列清空为止。</li></ol><p>这里有几个重点：</p><ul><li>当我们第一次执行的时候，解释器会将整体代码script放入宏任务队列中，因此事件循环是从第一个宏任务开始的；</li><li>如果在执行微任务的过程中，产生新的微任务添加到微任务队列中，也需要一起清空；微任务队列没清空之前，是不会执行下一个宏任务的。</li></ul><p>接下来，通过一个常见的面试题例子来模拟一下事件循环：：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;f&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">* 输出结果：a c f d e b</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><p>首先，当代码执行的时候，整体代码script被推入宏任务队列中，并开始执行该宏任务。</p><p><img src="`+n+'" alt="事件循环执行流程1"></p><p>按照代码顺序，首先执行 <code>console.log(&quot;a&quot;</code>)`。</p><p><img src="'+l+'" alt="事件循环执行流程2"></p><p>该函数上下文被推入调用栈，执行完后，即移除调用栈。</p><p>接下来执行 <code>setTimeout()</code>，该函数上下文也进入调用栈中。</p><p><img src="'+e+'" alt="事件循环执行流程3"></p><p>因为 <code>setTimeout()</code> 是一个宏任务，因此将其 <code>callback</code> 函数推入宏任务队列中，然后该函数就被移除调用栈，继续往下执行。</p><p><img src="'+h+'" alt="事件循环执行流程4"></p><p>紧接着是 <code>Promise</code> 语句，先将其放入调用栈，然后接着往下执行。</p><p><img src="'+k+'" alt="事件循环执行流程5"></p><p>执行 <code>console.log(&quot;c&quot;)</code> 和 <code>resolve()</code>，这里就不多说了。</p><p><img src="'+d+'" alt="事件循环执行流程6"></p><p>接着来到 <code>new Promise().then()</code> 方法，这是一个微任务，因此将其推入微任务队列中。</p><p><img src="'+o+'" alt="事件循环执行流程7"></p><p>这时 <code>new Promise</code> 语句已经执行结束了，就被移除调用栈。</p><p>接着做执行 <code>console.log(&#39;f&#39;)</code>。</p><p><img src="'+r+'" alt="事件循环执行流程8"></p><p>这时候，<code>script</code> 宏任务已经执行结束了，因此被推出宏任务队列。</p><p>紧接着开始清空微任务队列了。首先执行的是 <code>Promise then</code>，因此它被推入调用栈中。</p><p><img src="'+E+'" alt="事件循环执行流程9"></p><p>然后开始执行其中的 <code>console.log(&quot;d&quot;)</code>。</p><p><img src="'+c+'" alt="事件循环执行流程10"></p><p>执行结束后，检测到后面还有一个 <code>then()</code> 函数，因此将其推入微任务队列中。</p><p>此时第一个 <code>then()</code> 函数已经执行结束了，就会移除调用栈和微任务队列。</p><p><img src="'+g+'" alt="事件循环执行流程11"></p><p>此时微任务队列还没被清空，因此继续执行下一个微任务。</p><p>执行过程跟前面差不多，就不多说了。</p><p><img src="'+y+'" alt="事件循环执行流程12"></p><p>此时微任务队列已经清空了，第一个事件循环已经结束了。</p><p>接下来执行下一个宏任务，即 <code>setTimeout callback</code>。</p><p><img src="'+F+'" alt="事件循环执行流程13"></p><p>执行结束后，它也被移除宏任务队列和调用栈。</p><p>这时候微任务队列里面没有任务，因此第二个事件循环也结束了。</p><p>宏任务也被清空了，因此这段代码已经执行结束了。</p><p><img src="'+m+'" alt="事件循环执行流程14"></p>',77),C=[_];function v(B,b,A,q,f,S){return a(),i("div",null,C)}const J=s(u,[["render",v]]);export{T as __pageData,J as default};
